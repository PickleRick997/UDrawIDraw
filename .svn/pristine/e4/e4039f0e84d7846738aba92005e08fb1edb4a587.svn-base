package com.iems5722.group5;

import android.*;
import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.content.Intent;
import android.widget.AbsListView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import android.os.Environment;

import java.io.ByteArrayOutputStream;
import java.io.File;
//import android.util.C

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import java.net.HttpURLConnection;
import java.io.FileInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.URL;


import com.iems5722.group5.AsyncTasks.GetMessagesAsyncTask;
import com.iems5722.group5.AsyncTasks.SendMessageAsyncTask;
import com.iems5722.group5.AsyncTasks.UploadFileAsyncTask;
import com.iems5722.group5.R;

public class ChatActivity extends AppCompatActivity implements MsgViewInterface {
    private static final int REQUEST_PICK_PHOTO = 396;
    private static final int REQUEST_CROP_PHOTO = 140;

    private ChatViewAdapter adapter;
    private ListView msgView;
    private Integer roomId;
    private Integer totalPages;
    private Integer currentPage;
    private BroadcastReceiver msgReceiver;
    private String title;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);
        totalPages = 0;
        currentPage = 1;

        Intent intent = getIntent();
        title = intent.getStringExtra(MainActivity.CHATROOM_NAME);
        roomId = intent.getIntExtra(MainActivity.CHATROOM_ID, 0);


        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(title);
        setSupportActionBar(toolbar);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

        toolbar.setNavigationOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view){
                finish();
            }
        });

        // init message listview
        ArrayList<MessageItem> msgList = new ArrayList<MessageItem>();
        adapter = new ChatViewAdapter(this, msgList);
        msgView = (ListView)findViewById(R.id.message_view);
        msgView.setAdapter(adapter);

        msgView.setOnScrollListener(new AbsListView.OnScrollListener() {
            private Integer first = -1;

            @Override
            public void onScroll(AbsListView v, int first, int visible, int total) {
                this.first = first;
            }
            @Override
            public void onScrollStateChanged(AbsListView arg0, int scrollState) {
                // criteria for load previous page: scrolling up on first row
                if (scrollState==SCROLL_STATE_TOUCH_SCROLL && first == 0){
                    if (currentPage < totalPages) {
                        System.out.println("try scroll to previous page!!!");
                        getMessages(roomId, ++currentPage);
                    }
                    else
                    {
                        Toast.makeText(ChatActivity.this, "All messages loaded", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });

        msgReceiver = new BroadcastReceiver() {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            @Override
            public void onReceive(Context context, Intent intent) {
                String userName = intent.getStringExtra("name");
                String userId = intent.getStringExtra("user_id");
                String msg = intent.getStringExtra("message");
                String timestamp = intent.getStringExtra("timestamp");
                String chatroomName = intent.getStringExtra("chatroom");

                // add msg if currently in same chatroom and not my own msg
                // my own msg already added on send button click
                if (title.equals(chatroomName) && !userId.equals(getString(R.string.USER_ID))) {
                    Date t = null;
                    try {
                        t = sdf.parse(timestamp);
                    } catch (Exception e) {
                    }

                    MessageItem msgItem = new MessageItem(userName, msg, t, false);
                    adapter.add(msgItem);
                    msgView.setSelection(adapter.getCount() - 1);
                }
            }
        };
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_message, menu);
        return true;
    }



    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        //return true;
        switch (item.getItemId()){
            case R.id.action_refresh:
                Log.e("test","click");
                currentPage = 1;
                totalPages = 0;
                adapter.clear();
                getMessages(roomId, currentPage);
                return true;
            case R.id.action_attach:
                int r = ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_EXTERNAL_STORAGE);
                if (r != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 999);
                }
                r = ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
                if (r != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 998);
                }
                Intent t = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(t, REQUEST_PICK_PHOTO);
                return true;

            default:
                Log.e("test",""+item.getItemId());
                return super.onOptionsItemSelected(item);
        }

    }

    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {
        super.onActivityResult(requestCode, resultCode, imageReturnedIntent);
        switch(requestCode) {
            case REQUEST_PICK_PHOTO:
                if(resultCode == RESULT_OK){
                    Uri selectedImage = imageReturnedIntent.getData();
                    try {
                        Bitmap bmp = MediaStore.Images.Media.getBitmap(this.getContentResolver(), selectedImage);
                        // only crop if pic larger than canvas of photo editor
                        if (bmp.getWidth() <= 1150 && bmp.getHeight() <= 1179)
                        {

                        }
                        Intent crop = new Intent("com.android.camera.action.CROP");
                        crop.setDataAndType(selectedImage, "image/*");
                        crop.putExtra("crop", true);
                        crop.putExtra("aspectX", 1);
                        crop.putExtra("aspectY", 1);
                        crop.putExtra("outputX", 256);
                        crop.putExtra("outputY", 256);
                        crop.putExtra("scale", true);
                        crop.putExtra("return-data", true);
                        startActivityForResult(crop, REQUEST_CROP_PHOTO);
                    }catch(IOException e)
                    {

                    }
                }
                break;
            case REQUEST_CROP_PHOTO:
                if (imageReturnedIntent != null) {
                    Bundle extras = imageReturnedIntent.getExtras();
                    Bitmap bmp = extras.getParcelable("data");
                    String fileDCIM = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
                                    File.separator + "Camera";
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
                    String fileName = sdf.format(new Date()) + ".jpg";
                    File fout = new File(fileDCIM, fileName);
                    try {
                        FileOutputStream fos = new FileOutputStream(fout);
                        bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);
                        fos.flush();
                        fos.close();

                        // update gallery
                        sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(fout)));
                        // send to server
                        new UploadFileAsyncTask(this, roomId.toString(), getString(R.string.USER_ID),
                                getString(R.string.USER_NAME), fileDCIM, fileName)
                                .execute(getString(R.string.URL_UPLOAD_IMAGE));

                        // add in own msg list
                        MessageItem msgItem = new MessageItem(getString(R.string.USER_NAME), bmp, true);
                        adapter.add(msgItem);
                        msgView.setSelection(adapter.getCount() - 1);

                    }
                    catch(IOException ioe)
                    {

                    }
                }
                break;
        }
    }

    @Override
    protected void onStart(){
        getMessages(roomId, currentPage);
        LocalBroadcastManager.getInstance(this).registerReceiver(msgReceiver, new IntentFilter("NEW_MESSAGE"));
        super.onStart();
    }

    @Override
    protected void onStop() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(msgReceiver);
        super.onStop();
    }

    protected void getMessages(Integer roomId, Integer page)
    {
        GetMessagesAsyncTask t = new GetMessagesAsyncTask(this, adapter,
                            getString(R.string.USER_ID), getString(R.string.USER_NAME));
        t.intf = this;
        t.execute(getString(R.string.URL_GET_MESSAGES) + "?chatroom_id=" + roomId + "&page=" + page);
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[ ] grantResults) {

    }

    public void doSend(View view){
        EditText txtInput = (EditText)findViewById(R.id.text_input);
        String msg = txtInput.getText().toString();
        msg = msg.trim();
        if (msg.length() > 0)
        {
            System.out.println("send");
            new SendMessageAsyncTask(this, roomId.toString(), getString(R.string.USER_ID), getString(R.string.USER_NAME), msg)
                    .execute(getString(R.string.URL_SEND_MESSAGE));
            MessageItem msgItem = new MessageItem(getString(R.string.USER_NAME), msg, true);
            adapter.add(msgItem);
            msgView.setSelection(adapter.getCount() - 1);
        }
        txtInput.setText("");
    }

    // interface method for async task to report total pages
    @Override
    public void storeTotalPage(Integer totalPages) {
        this.totalPages = totalPages;
    }

}
