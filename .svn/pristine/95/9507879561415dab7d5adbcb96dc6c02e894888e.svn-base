package com.iems5722.group5;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.iems5722.group5.AsyncTasks.DownloadImageAsyncTask;
import com.iems5722.group5.AsyncTasks.GetMessagesAsyncTask;
import com.iems5722.group5.AsyncTasks.SendEditImageInvitationAsyncTask;
import com.iems5722.group5.AsyncTasks.SendMessageAsyncTask;
import com.iems5722.group5.AsyncTasks.UploadFileAsyncTask;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;


public class ChatActivity extends AppCompatActivity implements MsgViewInterface, DownloadImageCompleteInterface {
    private static final int REQUEST_PICK_PHOTO = 396;
    private static final int REQUEST_CROP_PHOTO = 140;

    private ChatViewAdapter adapter;
    private ListView msgView;
    private Integer roomId;
    private Integer totalPages;
    private Integer currentPage;
    private BroadcastReceiver msgReceiver;
    private String title;
    AlertDialog.Builder alert;
    final ArrayList<MessageItem> msgList = new ArrayList<MessageItem>();
    private Uri uriCrop;
    private String invitationFromUser;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);
        totalPages = 0;
        currentPage = 1;
        uriCrop = null;
        invitationFromUser = "";

        Intent intent = getIntent();
        title = intent.getStringExtra(MainActivity.CHATROOM_NAME);
        roomId = intent.getIntExtra(MainActivity.CHATROOM_ID, 0);


        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(title);
        setSupportActionBar(toolbar);

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

        toolbar.setNavigationOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view){
                finish();
            }
        });

        // init message listview
        //final ArrayList<MessageItem> msgList = new ArrayList<MessageItem>();
        adapter = new ChatViewAdapter(this, msgList);
        msgView = (ListView)findViewById(R.id.message_view);
        msgView.setAdapter(adapter);

        msgView.setOnScrollListener(new AbsListView.OnScrollListener() {
            private Integer first = -1;

            @Override
            public void onScroll(AbsListView v, int first, int visible, int total) {
                this.first = first;
            }
            @Override
            public void onScrollStateChanged(AbsListView arg0, int scrollState) {
                // criteria for load previous page: scrolling up on first row
                if (scrollState==SCROLL_STATE_TOUCH_SCROLL && first == 0){
                    if (currentPage < totalPages) {
                        System.out.println("try scroll to previous page!!!");
                        getMessages(roomId, ++currentPage);
                    }
                    else
                    {
                        Toast.makeText(ChatActivity.this, "All messages loaded", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });


        alert = new AlertDialog.Builder(this);
        msgView.setOnItemLongClickListener(new AbsListView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                final MessageItem item = msgList.get(position);

                if (item.getImage() == null) {
                    return true;
                }
                alert.setTitle("Group Edit");
                alert.setMessage("Do you want to edit this image with friends in this group?");
                BitmapDrawable bd = new BitmapDrawable(getResources(), item.getImage());
                alert.setIcon(bd);


                alert.setPositiveButton("YES", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        // set msg to invite friends
                        new SendEditImageInvitationAsyncTask(ChatActivity.this, roomId.toString(),
                                String.valueOf(SignInActivity.guser_id), SignInActivity.guser_name,
                                item.getImageName())
                                .execute(getString(R.string.URL_EDIT_IMAGE));

                        // then open draw dialog
                        Uri uri = bitmapToUri(item.getImage(), item.getImageName());
                        Intent intent = new Intent(ChatActivity.this, DrawingBoardActivity.class);
                        //ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        Log.d("item.getImage()", String.valueOf(item.getImage().getWidth()));
                        //item.getImage().compress(Bitmap.CompressFormat.JPEG, 100, stream);
                        intent.putExtra("image", uri.getPath());
                        intent.putExtra("user_id", item.getUserId());
                        startActivity(intent);
                    }
                });
                alert.setNegativeButton("NO", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                alert.show();
                return true;
            }
        });

        msgReceiver = new BroadcastReceiver() {

            @Override
            public void onReceive(Context context, Intent intent) {
                String msgType = intent.getStringExtra("msg_type");
                if ("MESSAGE".equals(msgType)) {
                    addIncomingMessage(intent);
                }
                else if ("EDIT_INVITE".equals(msgType)) {
                    askForEdit(intent);
                }
            }
        };
    }

    private void addIncomingMessage(Intent intent) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String userName = intent.getStringExtra("name");
        String userId = intent.getStringExtra("user_id");
        String msg = intent.getStringExtra("message");
        String timestamp = intent.getStringExtra("timestamp");
        String chatroomName = intent.getStringExtra("chatroom");
        String image = intent.getStringExtra("image");

        // add msg if currently in same chatroom and not my own msg
        // my own msg already added on send button click
        if (title.equals(chatroomName)) {//&& !userId.equals(String.valueOf(SignInActivity.guser_id))) {
            Date t = null;
            try {
                t = sdf.parse(timestamp);
            } catch (Exception e) {
            }

            MessageItem msgItem = new MessageItem(this, userId, userName, msg, image, t, false);
            adapter.add(msgItem);
            msgView.setSelection(adapter.getCount() - 1);
        }
    }

    private void askForEdit(Intent intent) {
        invitationFromUser = intent.getStringExtra("name");
        String userId = intent.getStringExtra("user_id");
        String chatroomName = intent.getStringExtra("chatroom");
        String imageName = intent.getStringExtra("image_name");

        if (title.equals(chatroomName)) {//&& !userId.equals(String.valueOf(SignInActivity.guser_id))) {
            final MessageItem item = findMessageItemByImage(imageName);

            if (item == null) {
                Toast.makeText(getApplicationContext(),
                        "Error finding image: " + imageName, Toast.LENGTH_SHORT).show();
                return;
            }

            if (item.getImage() == null) {
                try {

                    new DownloadImageAsyncTask(item, null).setActivity(this).execute(
                            getString(R.string.URL_DOWNLOAD_IMAGE) + "?file_name=" + item.getImageName()
                    );

                    String s = getString(R.string.URL_DOWNLOAD_IMAGE) + "?file_name=" + item.getImageName();
                    Bitmap bmp = BitmapFactory.decodeStream((InputStream) new URL(s).getContent());
                    item.setImage(bmp);
                }
                catch (Exception e)
                {
                    return;
                }

            }
            else {
                showEditInvitation(item, invitationFromUser);
            }
        }
    }

    private void showEditInvitation(MessageItem item, String userName) {
        alert.setTitle("Group Edit");
        alert.setMessage(userName + " invites you to edit this image. Join?");
        BitmapDrawable bd = new BitmapDrawable(getResources(), item.getImage());
        alert.setIcon(bd);
        final MessageItem tmpItem = item;

        alert.setPositiveButton("YES", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

                // open draw dialog
                Uri uri = bitmapToUri(tmpItem.getImage(), tmpItem.getImageName());
                Intent intent = new Intent(ChatActivity.this, DrawingBoardActivity.class);
                Log.d("item.getImage()", String.valueOf(tmpItem.getImage().getWidth()));
                intent.putExtra("image", uri.getPath());
                intent.putExtra("user_id", tmpItem.getUserId());
                startActivity(intent);
            }
        });
        alert.setNegativeButton("NO", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        alert.show();
    }

    private MessageItem findMessageItemByImage(String name) {
        for (MessageItem item : msgList)
        {
            if (name.equals(item.getImageName())) {
                return item;
            }
        }
        return null;
    }

    private Uri bitmapToUri(Bitmap bmp, String image_name) {
        String fileDCIM = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
                File.separator + "Camera";
        Uri uri = null;
        try {
            FileOutputStream os = new FileOutputStream(fileDCIM + "/" + image_name);
            bmp.compress(Bitmap.CompressFormat.JPEG, 100, os);
            os.flush();
            os.close();
            File fout = new File(fileDCIM, image_name);
            uri = Uri.fromFile(fout);
            sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, uri));
        }
        catch (Exception e) {
        }
        return uri;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_message, menu);
        return true;
    }



    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        //return true;
        switch (item.getItemId()){
            case R.id.action_refresh:
                Log.e("test","click");
                currentPage = 1;
                totalPages = 0;
                adapter.clear();
                getMessages(roomId, currentPage);
                return true;
            case R.id.action_attach:
                int r = ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_EXTERNAL_STORAGE);
                if (r != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 999);
                }
                r = ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
                if (r != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 998);
                }
                Intent t = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(t, REQUEST_PICK_PHOTO);
                return true;

            default:
                Log.e("test",""+item.getItemId());
                return super.onOptionsItemSelected(item);
        }

    }

    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {
        super.onActivityResult(requestCode, resultCode, imageReturnedIntent);
        switch(requestCode) {
            case REQUEST_PICK_PHOTO:
                if(resultCode == RESULT_OK){
                    Uri selectedImage = imageReturnedIntent.getData();
                    try {
                        Bitmap bmp = MediaStore.Images.Media.getBitmap(this.getContentResolver(), selectedImage);
                        // only crop if pic larger than canvas of photo editor
                        if (bmp.getWidth() <= 1150 && bmp.getHeight() <= 1179)
                        {

                        }
                        Intent crop = new Intent("com.android.camera.action.CROP");
                        crop.setDataAndType(selectedImage, "image/*");
                        crop.putExtra("crop", true);
                        crop.putExtra("aspectX", 1050);
                        crop.putExtra("aspectY", 1179);
                        crop.putExtra("outputX", 1050);
                        crop.putExtra("outputY", 1179);
                        crop.putExtra("outputFormat", "JPEG");
                        crop.putExtra("scale", true);
                        crop.putExtra("return-data", false);
                        String fileDCIM = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) +
                                File.separator + "Camera";
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
                        String fileName = sdf.format(new Date()) + ".jpg";
                        File fout = new File(fileDCIM, fileName);
                        uriCrop = Uri.fromFile(fout);
                        crop.putExtra(MediaStore.EXTRA_OUTPUT, uriCrop);
                        startActivityForResult(crop, REQUEST_CROP_PHOTO);
                    }catch(Exception e)
                    {
                        Toast.makeText(getApplicationContext(),
                                "Error happen when cropping image: " + e.getMessage(), Toast.LENGTH_SHORT).show();

                    }
                }
                break;
            case REQUEST_CROP_PHOTO:
                if (imageReturnedIntent != null && uriCrop != null) {
                    try {
                        // update gallery
                        sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, uriCrop));

                        // send to server
                        SimpleDateFormat sdfTimeStamp = new SimpleDateFormat("yyyyMMddHHmmssSSS");
                        String timeStamp = sdfTimeStamp.format(new Date());
                        new UploadFileAsyncTask(this, roomId.toString(), String.valueOf(SignInActivity.guser_id),
                                SignInActivity.guser_name, uriCrop, timeStamp)
                                .execute(getString(R.string.URL_UPLOAD_IMAGE));

                        // add in own msg list
                        Bitmap bmp = MediaStore.Images.Media.getBitmap(getContentResolver(), uriCrop);
                        String imageName = String.valueOf(SignInActivity.guser_id) + "_" + timeStamp + ".jpg";
                        MessageItem msgItem = new MessageItem(String.valueOf(SignInActivity.guser_id),
                                SignInActivity.guser_name, imageName, bmp, true);
                        adapter.add(msgItem);
                        msgView.setSelection(adapter.getCount() - 1);

                    }
                    catch(Exception e)
                    {
                        Toast.makeText(getApplicationContext(),
                                "Error happen when sending image to server: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                }
                break;
        }
    }

    @Override
    protected void onStart(){
        getMessages(roomId, currentPage);
        LocalBroadcastManager.getInstance(this).registerReceiver(msgReceiver, new IntentFilter("NEW_MESSAGE"));
        super.onStart();
    }

    @Override
    protected void onStop() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(msgReceiver);
        super.onStop();
    }

    protected void getMessages(Integer roomId, Integer page)
    {
        GetMessagesAsyncTask t = new GetMessagesAsyncTask(this, adapter,
                String.valueOf(SignInActivity.guser_id), SignInActivity.guser_name);
        t.intf = this;
        t.execute(getString(R.string.URL_GET_MESSAGES) + "?chatroom_id=" + roomId + "&page=" + page);
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[ ] grantResults) {

    }

    public void doSend(View view){
        EditText txtInput = (EditText)findViewById(R.id.text_input);
        String msg = txtInput.getText().toString();
        msg = msg.trim();
        if (msg.length() > 0)
        {
            System.out.println("send");
            new SendMessageAsyncTask(this, roomId.toString(), String.valueOf(SignInActivity.guser_id), SignInActivity.guser_name, msg)
                    .execute(getString(R.string.URL_SEND_MESSAGE));
            MessageItem msgItem = new MessageItem(String.valueOf(SignInActivity.guser_id),
                    SignInActivity.guser_name, msg, true);
            adapter.add(msgItem);
            msgView.setSelection(adapter.getCount() - 1);
        }
        txtInput.setText("");
    }

    // interface method for async task to report total pages
    @Override
    public void storeTotalPage(Integer totalPages) {
        this.totalPages = totalPages;
    }

    @Override
    public void onDownloadComplete(MessageItem item) {
        showEditInvitation(item, invitationFromUser);
    }
}
